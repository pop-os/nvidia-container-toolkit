/*
 * Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ebpf

import (
	"bytes"
	"io"

	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/asm"
	"github.com/opencontainers/runc/libcontainer/cgroups/ebpf/devicefilter"
	"github.com/opencontainers/runc/libcontainer/devices"
)

// GetMockProgramInstructions gets a mock set of asm instructions for the given ebpf program
func GetMockProgramInstructions(prog *ebpf.Program) (asm.Instructions, string, error) {
	rules := []*devices.Rule{
		{
			Allow:       false,
			Type:        devices.WildcardDevice,
			Permissions: "rwm",
		},
		{
			Allow:       true,
			Type:        devices.CharDevice,
			Major:       1,
			Minor:       5,
			Permissions: "rwm",
		},
		{
			Allow:       true,
			Type:        devices.CharDevice,
			Major:       1,
			Minor:       3,
			Permissions: "rwm",
		},
		{
			Allow:       true,
			Type:        devices.CharDevice,
			Major:       1,
			Minor:       9,
			Permissions: "rwm",
		},
		{
			Allow:       true,
			Type:        devices.CharDevice,
			Major:       1,
			Minor:       8,
			Permissions: "rwm",
		},
		{
			Allow:       true,
			Type:        devices.CharDevice,
			Major:       5,
			Minor:       0,
			Permissions: "rwm",
		},
		{
			Allow:       true,
			Type:        devices.CharDevice,
			Major:       5,
			Minor:       1,
			Permissions: "rwm",
		},
		{
			Allow:       true,
			Type:        devices.CharDevice,
			Major:       5,
			Minor:       2,
			Permissions: "rwm",
		},
		{
			Allow:       false,
			Type:        devices.CharDevice,
			Major:       10,
			Minor:       229,
			Permissions: "rwm",
		},
		{
			Allow:       true,
			Type:        devices.CharDevice,
			Major:       1,
			Minor:       3,
			Permissions: "rwm",
		},
		{
			Allow:       true,
			Type:        devices.CharDevice,
			Major:       136,
			Minor:       0,
			Permissions: "rwm",
		},
	}

	insts, _, err := devicefilter.DeviceFilter(rules)
	if err != nil {
		return nil, "", err
	}

	return insts, bpfProgramLicense, nil
}

// GetMockProgramInstructions2 gets a mock set of asm instructions for the given ebpf program
func GetMockProgramInstructions2(prog *ebpf.Program) (asm.Instructions, string, error) {
	var raw = []byte{
		0x61, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
		0x61, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
		0x61, 0x14, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x15, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x04, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x55, 0x05, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x04, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x55, 0x05, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x04, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x55, 0x05, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x05, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x04, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x55, 0x05, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x04, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x55, 0x05, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00, 0x05, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x04, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x55, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x04, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x55, 0x05, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xbc, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
		0x5d, 0x31, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x02, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x55, 0x04, 0x01, 0x00, 0x88, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xbc, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x5d, 0x31, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x02, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x55, 0x04, 0x01, 0x00, 0xfd, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x55, 0x02, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	var (
		reader = bytes.NewReader(raw)
		insts  asm.Instructions
	)
	for {
		var ins asm.Instruction
		_, err := ins.Unmarshal(reader, nativeByteOrder)
		if err == io.EOF {
			return insts, bpfProgramLicense, nil
		}
		if err != nil {
			return nil, "", err
		}
		insts = append(insts, ins)
	}
}
